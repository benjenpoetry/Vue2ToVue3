'use strict';

var language = require('@codemirror/language');
var langHtml = require('@codemirror/lang-html');
var langJavascript = require('@codemirror/lang-javascript');
var highlight = require('@lezer/highlight');
var common = require('@lezer/common');
var lr = require('@lezer/lr');

// This file was generated by lezer-generator. You probably shouldn't edit it.
const parser = lr.LRParser.deserialize({
  version: 14,
  states: "%pOVOWOOObQPOOOpOSO'#C_OOOO'#Cq'#CqQVOWOOQxQPOOO!TQQOOQ!YQPOOOOOO,58y,58yO!_OSO,58yOOOO-E6o-E6oO!dQQO'#CrQ{QPOOO!iQPOOQ{QPOOO!qQPOOOOOO1G.e1G.eOOQO,59^,59^OOQO-E6p-E6pO!yOpO'#CjO#RO`O'#CjQOQPOOO#ZO#tO'#CnO#fO!bO'#CnOOQO,59U,59UO#qOpO,59UO#vO`O,59UOOOO'#Cs'#CsO#{O#tO,59YOOQO,59Y,59YOOOO'#Ct'#CtO$WO!bO,59YOOQO1G.p1G.pOOOO-E6q-E6qOOQO1G.t1G.tOOOO-E6r-E6r",
  stateData: "$g~OkOS~OQROSQOVRO~OXTOYUO[UOaVO~OTXOUWO~OYUO]]OlZO~OZ^O~O]_O~OU`O~OZaO~OmcOodO~OmfOogO~O_iOnhO~O`jOphO~OckOqkOrmO~OdnOsnOtmO~OnpO~OppO~OckOqkOrrO~OdnOsnOtrO~OXYa~",
  goto: "!_iPPPjPPPPPPPPPPnPPPqPPtz!R!XTROSRe]Re_QSORYSS[T^Rb[QlfRqlQogRso",
  nodeNames: "âš  Content Text Interpolation {{ InterpolationContent }} Entity Attribute VueAttributeName : Identifier @ Is ScriptAttributeValue AttributeScript AttributeScript AttributeName AttributeValue Entity Entity",
  maxTerm: 36,
  nodeProps: [
    ["isolate", -3,3,14,18,""]
  ],
  skippedNodes: [0],
  repeatNodeCount: 4,
  tokenData: "'y~RdXY!aYZ!a]^!apq!ars!rwx!w}!O!|!O!P#t!Q![#y![!]$s!_!`%g!b!c%l!c!}#y#R#S#y#T#j#y#j#k%q#k#o#y%W;'S#y;'S;:j$m<%lO#y~!fSk~XY!aYZ!a]^!apq!a~!wOm~~!|Oo~!b#RXa!b}!O!|!Q![!|![!]!|!c!}!|#R#S!|#T#o!|%W;'S!|;'S;:j#n<%lO!|!b#qP;=`<%l!|~#yOl~%W$QXZ#ta!b}!O!|!Q![#y![!]!|!c!}#y#R#S#y#T#o#y%W;'S#y;'S;:j$m<%lO#y%W$pP;=`<%l#y~$zXY~a!b}!O!|!Q![!|![!]!|!c!}!|#R#S!|#T#o!|%W;'S!|;'S;:j#n<%lO!|~%lO]~~%qO[~%W%xXZ#ta!b}!O&e!Q![#y![!]!|!c!}#y#R#S#y#T#o#y%W;'S#y;'S;:j$m<%lO#y!b&jXa!b}!O!|!Q![!|![!]!|!c!}'V#R#S!|#T#o'V%W;'S!|;'S;:j#n<%lO!|!b'^XX!ba!b}!O!|!Q![!|![!]!|!c!}'V#R#S!|#T#o'V%W;'S!|;'S;:j#n<%lO!|",
  tokenizers: [6, 7, new lr.LocalTokenGroup("b~RP#q#rU~XP#q#r[~aOU~~", 17, 5), new lr.LocalTokenGroup("!k~RQvwX#o#p!_~^TV~Opmq!]m!^;'Sm;'S;=`!X<%lOm~pUOpmq!]m!]!^!S!^;'Sm;'S;=`!X<%lOm~!XOV~~![P;=`<%lm~!bP#o#p!e~!jOS~~", 72, 2), new lr.LocalTokenGroup("[~RPwxU~ZOp~~", 11, 16), new lr.LocalTokenGroup("[~RPrsU~ZOn~~", 11, 15), new lr.LocalTokenGroup("!e~RQvwXwx!_~^Td~Opmq!]m!^;'Sm;'S;=`!X<%lOm~pUOpmq!]m!]!^!S!^;'Sm;'S;=`!X<%lOm~!XOd~~![P;=`<%lm~!dOt~~", 66, 35), new lr.LocalTokenGroup("!e~RQrsXvw^~^Or~~cTc~Oprq!]r!^;'Sr;'S;=`!^<%lOr~uUOprq!]r!]!^!X!^;'Sr;'S;=`!^<%lOr~!^Oc~~!aP;=`<%lr~", 66, 33)],
  topRules: {"Content":[0,1],"Attribute":[1,8]},
  tokenPrec: 157
});

const exprParser = langJavascript.javascriptLanguage.parser.configure({
    top: "SingleExpression"
});
const baseParser = parser.configure({
    props: [
        highlight.styleTags({
            Text: highlight.tags.content,
            Is: highlight.tags.definitionOperator,
            AttributeName: highlight.tags.attributeName,
            VueAttributeName: highlight.tags.keyword,
            Identifier: highlight.tags.variableName,
            "AttributeValue ScriptAttributeValue": highlight.tags.attributeValue,
            Entity: highlight.tags.character,
            "{{ }}": highlight.tags.brace,
            "@ :": highlight.tags.punctuation
        })
    ]
});
const exprMixed = { parser: exprParser };
const textParser = baseParser.configure({
    wrap: common.parseMixed((node, input) => node.name == "InterpolationContent" ? exprMixed : null),
});
const attrParser = baseParser.configure({
    wrap: common.parseMixed((node, input) => node.name == "AttributeScript" ? exprMixed : null),
    top: "Attribute"
});
const textMixed = { parser: textParser }, attrMixed = { parser: attrParser };
const baseHTML = langHtml.html();
function makeVue(base) {
    return base.configure({
        dialect: "selfClosing",
        wrap: common.parseMixed(mixVue)
    }, "vue");
}
/// A language provider for Vue templates.
const vueLanguage = makeVue(baseHTML.language);
function mixVue(node, input) {
    switch (node.name) {
        case "Attribute":
            return /^(@|:|v-)/.test(input.read(node.from, node.from + 2)) ? attrMixed : null;
        case "Text":
            return textMixed;
    }
    return null;
}
/// Vue template support.
function vue(config = {}) {
    let base = baseHTML;
    if (config.base) {
        if (config.base.language.name != "html" || !(config.base.language instanceof language.LRLanguage))
            throw new RangeError("The base option must be the result of calling html(...)");
        base = config.base;
    }
    return new language.LanguageSupport(base.language == baseHTML.language ? vueLanguage : makeVue(base.language), [
        base.support,
        base.language.data.of({ closeBrackets: { brackets: ["{", '"'] } })
    ]);
}

exports.vue = vue;
exports.vueLanguage = vueLanguage;
